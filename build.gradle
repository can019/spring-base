plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

jacoco {
	toolVersion = "0.8.11"
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-devtools'
	implementation 'com.fasterxml.uuid:java-uuid-generator:5.0.0'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'

	// aop
	implementation 'org.springframework.boot:spring-boot-starter-aop'

	// docker compose
	testAndDevelopmentOnly("org.springframework.boot:spring-boot-docker-compose")

	// 테스트에서 lombok 사용
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	// Logback을 log4j2로 대체
	implementation("org.springframework.boot:spring-boot-starter-log4j2")
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
	modules {
		module("org.springframework.boot:spring-boot-starter-logging") {
			replacedBy("org.springframework.boot:spring-boot-starter-log4j2")
		}
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	integrationTestImplementation.extendsFrom implementation
	integrationTestImplementation.extendsFrom testImplementation
	integrationTestRuntimeOnly.extendsFrom testRuntimeOnly

	unitTestImplementation.extendsFrom implementation
	unitTestImplementation.extendsFrom testImplementation
	unitTestRuntimeOnly.extendsFrom testRuntimeOnly
}

sourceSets {
	integrationTest {
		java.srcDir "$projectDir/src/test/integration/java"
		resources.srcDir "$projectDir/src/test/integration/resources"
		compileClasspath += main.output + test.output
		runtimeClasspath += main.output + test.output
	}

	unitTest {
		java.srcDir "$projectDir/src/test/unit/java"
		resources.srcDir "$projectDir/src/test/unit/resources"
		compileClasspath += main.output + test.output
		runtimeClasspath += main.output + test.output
	}
}
tasks.withType(JacocoReport) {
	reports {
		html.required = true
		xml.required = true
		csv.required = false
	}
}

tasks.withType(Test){
	useJUnitPlatform()
}

task integrationTest(type: Test) {
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	jacoco {
		destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
	}
}

task unitTest(type: Test) {
	testClassesDirs = sourceSets.unitTest.output.classesDirs
	classpath = sourceSets.unitTest.runtimeClasspath
	jacoco {
		destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
	}
}

task unitTestJacocoReport(type: JacocoReport) {
	executionData fileTree(dir: "$buildDir/jacoco/", include: "**/unitTest.exec")
	sourceSets sourceSets.main
	reports {
		xml.destination file("$buildDir/reports/jacoco/unitTest/index.xml")
		html.destination file("$buildDir/reports/jacoco/unitTest/html")
	}
}

task integrationTestJacocoReport(type: JacocoReport) {
	executionData fileTree(dir: "$buildDir/jacoco/", include: "**/integrationTest.exec")
	sourceSets sourceSets.main
	reports {
		xml.destination file("$buildDir/reports/jacoco/integrationTest/index.xml")
		html.destination file("$buildDir/reports/jacoco/integrationTest/html")
	}
}

task overAllJacocoTestReport(type: JacocoReport) {
	executionData fileTree(dir: "$buildDir/jacoco/", include: "**/*.exec")
	sourceSets sourceSets.main
	reports {
		xml.destination file("$buildDir/reports/jacoco/total/index.xml")
		html.destination file("$buildDir/reports/jacoco/total/html")
	}
}

check.dependsOn integrationTest
check.dependsOn unitTest