plugins {
	id 'java'
	id 'org.springframework.boot'
	id 'io.spring.dependency-management'
	id 'org.sonarqube'
	id "org.asciidoctor.jvm.convert"
	id 'com.epages.restdocs-api-spec'
	id 'com.github.can019.base.github-pages'
}

//apply from: 'gradle/jacoco.gradle'
apply from: 'support/jacoco/build.gradle'
allprojects {
	group = 'com.github.can019.base'
	version = "${applicationVersion}"

	repositories {
		mavenCentral()
	}
}

subprojects {
	java{
		sourceCompatibility = '21'
	}

	apply plugin: 'java'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'com.epages.restdocs-api-spec'
	apply plugin: 'jacoco'
	apply plugin: 'org.sonarqube'

	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.2.5'
		implementation 'org.springframework.boot:spring-boot-starter-web:3.2.5'
		implementation 'org.springframework.boot:spring-boot-devtools:3.2.5'

		testImplementation 'org.springframework.boot:spring-boot-starter-test:3.2.5'
		testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.10.2'
		runtimeOnly 'com.h2database:h2:2.2.224'
		runtimeOnly 'com.mysql:mysql-connector-j:8.3.0'

		// aop
		implementation 'org.springframework.boot:spring-boot-starter-aop:3.2.5'

		// docker compose
		testAndDevelopmentOnly 'org.springframework.boot:spring-boot-docker-compose:3.2.5'

		// lombok
		compileOnly 'org.projectlombok:lombok:1.18.32'
		annotationProcessor 'org.projectlombok:lombok:1.18.32'
		testCompileOnly 'org.projectlombok:lombok:1.18.32'
		testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'

		// Logback을 log4j2로 대체
		implementation 'org.springframework.boot:spring-boot-starter-log4j2:3.2.5'
		implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.4'
		modules {
			module("org.springframework.boot:spring-boot-starter-logging") {
				replacedBy("org.springframework.boot:spring-boot-starter-log4j2")
			}
		}
		testImplementation 'org.apache.logging.log4j:log4j-core'
		testImplementation 'org.apache.logging.log4j:log4j-core-test'


		// actuator
		implementation 'org.springframework.boot:spring-boot-starter-actuator:3.2.5'

		// rest assured
		testImplementation 'io.rest-assured:rest-assured:5.3.2' // add rest-assured dependency
		testImplementation 'org.springframework.restdocs:spring-restdocs-restassured:3.0.1'

		testImplementation 'com.epages:restdocs-api-spec-restassured:0.19.2' // 3
		testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.19.2'

		// test container
		testImplementation 'org.testcontainers:junit-jupiter:1.19.7'
		runtimeOnly 'com.mysql:mysql-connector-j:8.3.0'
		testImplementation 'org.testcontainers:mysql:1.19.7'

		implementation 'net.datafaker:datafaker:2.3.1'

		// uuid v7
		implementation 'com.github.f4b6a3:uuid-creator:4.4.0'
	}

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
			extendsFrom testAnnotationProcessor
		}
	}

	ext {
		snippetsDir = file("build/generated-snippets")
	}

	tasks.withType(JacocoReport) {
		reports {
			html.required = true
			xml.required = true
			csv.required = false
		}
	}

	tasks.withType(Test){
		useJUnitPlatform()
	}

	task unitTest(type: Test) {
		group = 'verification'
		description = 'Runs unit tests.'
		testClassesDirs = sourceSets.test.output.classesDirs
		classpath = sourceSets.test.runtimeClasspath

		filter {
			includeTestsMatching "*UnitTest"
		}
	}

	task integrationTest(type: Test) {
		group = 'verification'
		description = 'Runs integration tests.'
		testClassesDirs = sourceSets.test.output.classesDirs
		classpath = sourceSets.test.runtimeClasspath

		filter {
			includeTestsMatching "*IntegrationTest"
			includeTestsMatching "*SliceTest"
			includeTestsMatching "*E2ETest"
		}
	}

	openapi3 {
		server = 'http://localhost:8080'
		title = 'SPRING-BASE'
		description = 'Spring base'
		version = "${applicationVersion}"
		format = 'yaml'
	}

	sonarqube {
		properties {
			property 'sonar.java.binaries', "${buildDir}/classes"
		}
	}
}

sonar {
	properties {
		property 'sonar.host.url', 'https://sonarcloud.io'
		property 'sonar.organization', 'can019'
		property 'sonar.projectKey', 'can019_spring-base'
		property 'sonar.sources', 'src/main/java'
		property 'sonar.test.inclusions', '**/*Test.java'
		property 'sonar.language', 'java'
		property 'sonar.sourceEncoding', 'UTF-8'
		property 'sonar.coverage.jacoco.xmlReportPaths', "${buildDir}/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml"
		property "sonar.exclusions", excludedPatterns.join(',')
	}
}

tasks.register('copyOpenApi3Results',Copy) {
	subprojects.each { subproject ->
		def openApi3ResultsDir = file("${subproject.buildDir}/api-spec/")

		if (openApi3ResultsDir.exists()) {
			from(openApi3ResultsDir) {
				into "${subproject.name}"
			}
		} else {
			logger.info("No openapi3 file in submodule [${subproject.name}]")
		}
	}
	into "$buildDir/api-spec" // 병합된 결과를 저장할
}
tasks.register('aggregateJunitHtmlReports', TestReport){
	destinationDirectory = file("$buildDir/reports/tests")
	reportOn subprojects*.test
}

tasks.register('aggregateJunitXmlReports', Copy){
	onlyIf { true }
	def xmlReportDir = file("$buildDir/reports/tests/xml")
	xmlReportDir.mkdirs()

	subprojects.each { subproject ->
		def testResultDir = subproject.file("${subproject.buildDir}/test-results/test")

		if (testResultDir.exists()) {
			copy {
				from subproject.test.reports.junitXml.outputLocation
				into xmlReportDir
				include "**/*.xml"
				// Rename files to avoid conflicts
				rename { String fileName ->
					def projectPath = subproject.path.substring(1).replace(':', '-')
					"${projectPath}-${fileName}"
				}
			}
		} else {
			logger.lifecycle("Skipping ${subproject.path}: No test results found.")
		}
	}
}

tasks.register('aggregateJunitTestReports', TestReport) {
	aggregateJunitXmlReports.mustRunAfter(aggregateJunitHtmlReports)
	dependsOn(aggregateJunitHtmlReports)
	dependsOn(aggregateJunitXmlReports)
}

bootJar.enabled = false