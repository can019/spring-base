plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
	id 'org.sonarqube' version '4.2.1.3168'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
	id 'com.epages.restdocs-api-spec' version '0.19.2' // 1
}

group = 'com.github.can019'
version = '0.2.1'

java {
	sourceCompatibility = '21'
}

jacoco {
	toolVersion = "0.8.11"
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.2.5'
	implementation 'org.springframework.boot:spring-boot-starter-web:3.2.5'
	implementation 'org.springframework.boot:spring-boot-devtools:3.2.5'
	implementation 'com.fasterxml.uuid:java-uuid-generator:5.0.0'

	testImplementation 'org.springframework.boot:spring-boot-starter-test:3.2.5'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.10.2'
	runtimeOnly 'com.h2database:h2:2.2.224'
	runtimeOnly 'com.mysql:mysql-connector-j:8.3.0'

	// aop
	implementation 'org.springframework.boot:spring-boot-starter-aop:3.2.5'

	// docker compose
	testAndDevelopmentOnly 'org.springframework.boot:spring-boot-docker-compose:3.2.5'

	// lombok
	compileOnly 'org.projectlombok:lombok:1.18.32'
	annotationProcessor 'org.projectlombok:lombok:1.18.32'
	testCompileOnly 'org.projectlombok:lombok:1.18.32'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'

	// Logback을 log4j2로 대체
	implementation 'org.springframework.boot:spring-boot-starter-log4j2:3.2.5'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.4'
	modules {
		module("org.springframework.boot:spring-boot-starter-logging") {
			replacedBy("org.springframework.boot:spring-boot-starter-log4j2")
		}
	}
	// actuator
	implementation 'org.springframework.boot:spring-boot-starter-actuator:3.2.5'

	// rest assured
	testImplementation 'io.rest-assured:rest-assured:5.3.2' // add rest-assured dependency
	testImplementation 'org.springframework.restdocs:spring-restdocs-restassured:3.0.1'

	testImplementation 'com.epages:restdocs-api-spec-restassured:0.19.2' // 3
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.19.2'

	// test container
	testImplementation 'org.testcontainers:junit-jupiter:1.19.7'
	runtimeOnly 'com.mysql:mysql-connector-j:8.3.0'
	testImplementation 'org.testcontainers:mysql:1.19.7'

	// spring security
	implementation 'org.springframework.boot:spring-boot-starter-security:3.2.5'
	testImplementation 'org.springframework.security:spring-security-test:3.2.5'

}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
		extendsFrom testAnnotationProcessor
	}
	integrationTestImplementation.extendsFrom implementation
	integrationTestImplementation.extendsFrom testImplementation
	integrationTestRuntimeOnly.extendsFrom testRuntimeOnly

	unitTestImplementation.extendsFrom implementation
	unitTestImplementation.extendsFrom testImplementation
	unitTestRuntimeOnly.extendsFrom testRuntimeOnly

	unitTestCompileOnly.extendsFrom testCompileOnly
	unitTestAnnotationProcessor.extendsFrom testAnnotationProcessor
	integrationTestCompileOnly.extendsFrom testCompileOnly
	integrationTestAnnotationProcessor.extendsFrom testAnnotationProcessor
}

sourceSets {
	integrationTest {
		java.srcDir "$projectDir/src/integration/java"
		resources.srcDir "$projectDir/src/integration/resources"
		compileClasspath += main.output + test.output
		runtimeClasspath += main.output + test.output
	}

	unitTest {
		java.srcDir "$projectDir/src/unit/java"
		resources.srcDir "$projectDir/src/unit/resources"
		compileClasspath += main.output + test.output
		runtimeClasspath += main.output + test.output
	}
}

ext {
	snippetsDir = file("build/generated-snippets")
}

tasks.withType(JacocoReport) {
	reports {
		html.required = true
		xml.required = true
		csv.required = false
	}
}

tasks.withType(Test){
	useJUnitPlatform()
}

task integrationTest(type: Test) {
	description = 'Integration test' // 태스크 설명
	group = 'test'

	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	jacoco {
		destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
	}
}

task unitTest(type: Test) {
	description = 'Unit test' // 태스크 설명
	group = 'test'

	testClassesDirs = sourceSets.unitTest.output.classesDirs
	classpath = sourceSets.unitTest.runtimeClasspath
	jacoco {
		destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
	}
}

task unitTestJacocoReport(type: JacocoReport) {
	executionData fileTree(dir: "$buildDir/jacoco/", include: "**/unitTest.exec")
	sourceSets sourceSets.main
	reports {
		xml.destination file("$buildDir/reports/jacoco/unitTest/index.xml")
		html.destination file("$buildDir/reports/jacoco/unitTest/html")
	}
}

task integrationTestJacocoReport(type: JacocoReport) {
	executionData fileTree(dir: "$buildDir/jacoco/", include: "**/integrationTest.exec")
	sourceSets sourceSets.main
	reports {
		xml.destination file("$buildDir/reports/jacoco/integrationTest/index.xml")
		html.destination file("$buildDir/reports/jacoco/integrationTest/html")
	}
}

task overAllJacocoTestReport(type: JacocoReport) {
	executionData fileTree(dir: "$buildDir/jacoco/", include: "**/*.exec")
	sourceSets sourceSets.main
	reports {
		xml.destination file("$buildDir/reports/jacoco/total/index.xml")
		html.destination file("$buildDir/reports/jacoco/total/html")
	}
}

sonar {
	properties {
		property 'sonar.host.url', 'https://sonarcloud.io'
		property 'sonar.organization', 'can019'
		property 'sonar.projectKey', 'can019_spring-base'
		property 'sonar.sources', 'src/main/java'
		property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/total/index.xml'
	}
}

asciidoctor {
	doFirst {
		delete file("src/main/resources/static/docs")
	}
	sourceDir snippetsDir
}

openapi3 {
	server = 'http://localhost:8080'
	title = 'SPRING-BASE'
	description = 'Spring base'
	version = '0.2.1'
	format = 'yaml'
}

check.dependsOn integrationTest
check.dependsOn unitTest