plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'org.sonarqube' version '4.2.1.3168'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
	id 'com.epages.restdocs-api-spec' version '0.19.2' // 1
}

apply from: 'gradle/jacoco.gradle'

allprojects {
	group = 'com.github.can019.base'
	version = '0.3.0-SNAPSHOT'

	repositories {
		mavenCentral()
	}
}

subprojects {
	java{
		sourceCompatibility = '21'
	}

	apply plugin: 'java'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'com.epages.restdocs-api-spec'
	apply plugin: 'jacoco'

	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.2.5'
		implementation 'org.springframework.boot:spring-boot-starter-web:3.2.5'
		implementation 'org.springframework.boot:spring-boot-devtools:3.2.5'
		implementation 'com.fasterxml.uuid:java-uuid-generator:5.0.0'

		testImplementation 'org.springframework.boot:spring-boot-starter-test:3.2.5'
		testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.10.2'
		runtimeOnly 'com.h2database:h2:2.2.224'
		runtimeOnly 'com.mysql:mysql-connector-j:8.3.0'

		// aop
		implementation 'org.springframework.boot:spring-boot-starter-aop:3.2.5'

		// docker compose
		testAndDevelopmentOnly 'org.springframework.boot:spring-boot-docker-compose:3.2.5'

		// lombok
		compileOnly 'org.projectlombok:lombok:1.18.32'
		annotationProcessor 'org.projectlombok:lombok:1.18.32'
		testCompileOnly 'org.projectlombok:lombok:1.18.32'
		testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'

		// Logback을 log4j2로 대체
		implementation 'org.springframework.boot:spring-boot-starter-log4j2:3.2.5'
		implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.4'
		modules {
			module("org.springframework.boot:spring-boot-starter-logging") {
				replacedBy("org.springframework.boot:spring-boot-starter-log4j2")
			}
		}
		// actuator
		implementation 'org.springframework.boot:spring-boot-starter-actuator:3.2.5'

		// rest assured
		testImplementation 'io.rest-assured:rest-assured:5.3.2' // add rest-assured dependency
		testImplementation 'org.springframework.restdocs:spring-restdocs-restassured:3.0.1'

		testImplementation 'com.epages:restdocs-api-spec-restassured:0.19.2' // 3
		testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.19.2'

		// test container
		testImplementation 'org.testcontainers:junit-jupiter:1.19.7'
		runtimeOnly 'com.mysql:mysql-connector-j:8.3.0'
		testImplementation 'org.testcontainers:mysql:1.19.7'
	}

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
			extendsFrom testAnnotationProcessor
		}
	}

	ext {
		snippetsDir = file("build/generated-snippets")
	}

	tasks.withType(JacocoReport) {
		reports {
			html.required = true
			xml.required = true
			csv.required = false
		}
	}

	tasks.withType(Test){
		useJUnitPlatform()
	}

	task unitTest(type: Test) {
		group = 'verification'
		description = 'Runs unit tests.'
		testClassesDirs = sourceSets.test.output.classesDirs
		classpath = sourceSets.test.runtimeClasspath

		filter {
			includeTestsMatching "*UnitTest"
		}
	}

	task integrationTest(type: Test) {
		group = 'verification'
		description = 'Runs integration tests.'
		testClassesDirs = sourceSets.test.output.classesDirs
		classpath = sourceSets.test.runtimeClasspath

		filter {
			includeTestsMatching "*IntegrationTest"
			includeTestsMatching "*SliceTest"
			includeTestsMatching "*E2ETest"
		}
	}
}

bootJar.enabled = false

//java {
//	sourceCompatibility = '21'
//}


//task integrationTest(type: Test) {
//	description = 'Integration test' // 태스크 설명
//	group = 'test'
//
//	testClassesDirs = sourceSets.integrationTest.output.classesDirs
//	classpath = sourceSets.integrationTest.runtimeClasspath
//	jacoco {
//		destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
//	}
//}

//task unitTest(type: Test) {
//	description = 'Unit test' // 태스크 설명
//	group = 'test'
//
//	testClassesDirs = sourceSets.unitTest.output.classesDirs
//	classpath = sourceSets.unitTest.runtimeClasspath
//	jacoco {
//		destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
//	}
//}

//task overAllJacocoTestReport(type: JacocoReport) {
//	executionData fileTree(dir: "$buildDir/jacoco/", include: "**/*.exec")
//	sourceSets sourceSets.main
//	reports {
//		xml.destination file("$buildDir/reports/jacoco/total/index.xml")
//		html.destination file("$buildDir/reports/jacoco/total/html")
//	}
//}

//sonar {
//	properties {
//		property 'sonar.host.url', 'https://sonarcloud.io'
//		property 'sonar.organization', 'can019'
//		property 'sonar.projectKey', 'can019_spring-base'
//		property 'sonar.sources', 'src/main/java'
//		property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/total/index.xml'
//	}
//}

//asciidoctor {
//	doFirst {
//		delete file("src/main/resources/static/docs")
//	}
//	sourceDir snippetsDir
//}

openapi3 {
	server = 'http://localhost:8080'
	title = 'SPRING-BASE'
	description = 'Spring base'
	version = '0.3.0-SNAPSHOT'
	format = 'yaml'
}